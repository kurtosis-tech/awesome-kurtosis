/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BlackjackInterface extends utils.Interface {
  functions: {
    "MAX_BET()": FunctionFragment;
    "MIN_BET()": FunctionFragment;
    "bet(uint256)": FunctionFragment;
    "deal()": FunctionFragment;
    "getCurrentStage()": FunctionFragment;
    "getDealersFaceUpCardValue()": FunctionFragment;
    "getGameInfo()": FunctionFragment;
    "getPlayerInfo(address)": FunctionFragment;
    "payout()": FunctionFragment;
    "play(uint8)": FunctionFragment;
    "players(address)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_BET"
      | "MIN_BET"
      | "bet"
      | "deal"
      | "getCurrentStage"
      | "getDealersFaceUpCardValue"
      | "getGameInfo"
      | "getPlayerInfo"
      | "payout"
      | "play"
      | "players"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MAX_BET", values?: undefined): string;
  encodeFunctionData(functionFragment: "MIN_BET", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDealersFaceUpCardValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "payout", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MIN_BET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDealersFaceUpCardValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "BetReceived(address,uint256)": EventFragment;
    "CardDrawn(address,uint8,uint8)": EventFragment;
    "CollectedChips(address,uint256)": EventFragment;
    "DealerMoved(address)": EventFragment;
    "PaidChips(address,uint256)": EventFragment;
    "PlayerMoved(address)": EventFragment;
    "StageAdvanced(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CardDrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectedChips"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DealerMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidChips"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StageAdvanced"): EventFragment;
}

export interface BetReceivedEventObject {
  player: string;
  amount: BigNumber;
}
export type BetReceivedEvent = TypedEvent<
  [string, BigNumber],
  BetReceivedEventObject
>;

export type BetReceivedEventFilter = TypedEventFilter<BetReceivedEvent>;

export interface CardDrawnEventObject {
  player: string;
  suit: number;
  value: number;
}
export type CardDrawnEvent = TypedEvent<
  [string, number, number],
  CardDrawnEventObject
>;

export type CardDrawnEventFilter = TypedEventFilter<CardDrawnEvent>;

export interface CollectedChipsEventObject {
  player: string;
  amount: BigNumber;
}
export type CollectedChipsEvent = TypedEvent<
  [string, BigNumber],
  CollectedChipsEventObject
>;

export type CollectedChipsEventFilter = TypedEventFilter<CollectedChipsEvent>;

export interface DealerMovedEventObject {
  dealer: string;
}
export type DealerMovedEvent = TypedEvent<[string], DealerMovedEventObject>;

export type DealerMovedEventFilter = TypedEventFilter<DealerMovedEvent>;

export interface PaidChipsEventObject {
  player: string;
  amount: BigNumber;
}
export type PaidChipsEvent = TypedEvent<
  [string, BigNumber],
  PaidChipsEventObject
>;

export type PaidChipsEventFilter = TypedEventFilter<PaidChipsEvent>;

export interface PlayerMovedEventObject {
  player: string;
}
export type PlayerMovedEvent = TypedEvent<[string], PlayerMovedEventObject>;

export type PlayerMovedEventFilter = TypedEventFilter<PlayerMovedEvent>;

export interface StageAdvancedEventObject {
  stage: number;
}
export type StageAdvancedEvent = TypedEvent<[number], StageAdvancedEventObject>;

export type StageAdvancedEventFilter = TypedEventFilter<StageAdvancedEvent>;

export interface Blackjack extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlackjackInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_BET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_BET(overrides?: CallOverrides): Promise<[BigNumber]>;

    bet(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentStage(overrides?: CallOverrides): Promise<[number]>;

    getDealersFaceUpCardValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGameInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, string[]] & {
        numPlayers: BigNumber;
      }
    >;

    getPlayerInfo(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, BigNumber, BigNumber]>;

    payout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    play(
      decision: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, BigNumber, BigNumber] & {
        isPlayer: boolean;
        betMade: boolean;
        turnOver: boolean;
        betValue: BigNumber;
        stackValue: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_BET(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

  bet(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deal(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentStage(overrides?: CallOverrides): Promise<number>;

  getDealersFaceUpCardValue(overrides?: CallOverrides): Promise<BigNumber>;

  getGameInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, number, string[]] & {
      numPlayers: BigNumber;
    }
  >;

  getPlayerInfo(
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, BigNumber, BigNumber]>;

  payout(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  play(
    decision: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  players(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean, BigNumber, BigNumber] & {
      isPlayer: boolean;
      betMade: boolean;
      turnOver: boolean;
      betValue: BigNumber;
      stackValue: BigNumber;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deal(overrides?: CallOverrides): Promise<void>;

    getCurrentStage(overrides?: CallOverrides): Promise<number>;

    getDealersFaceUpCardValue(overrides?: CallOverrides): Promise<BigNumber>;

    getGameInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, number, string[]] & {
        numPlayers: BigNumber;
      }
    >;

    getPlayerInfo(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, BigNumber, BigNumber]>;

    payout(overrides?: CallOverrides): Promise<void>;

    play(
      decision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, BigNumber, BigNumber] & {
        isPlayer: boolean;
        betMade: boolean;
        turnOver: boolean;
        betValue: BigNumber;
        stackValue: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BetReceived(address,uint256)"(
      player?: null,
      amount?: null
    ): BetReceivedEventFilter;
    BetReceived(player?: null, amount?: null): BetReceivedEventFilter;

    "CardDrawn(address,uint8,uint8)"(
      player?: null,
      suit?: null,
      value?: null
    ): CardDrawnEventFilter;
    CardDrawn(player?: null, suit?: null, value?: null): CardDrawnEventFilter;

    "CollectedChips(address,uint256)"(
      player?: null,
      amount?: null
    ): CollectedChipsEventFilter;
    CollectedChips(player?: null, amount?: null): CollectedChipsEventFilter;

    "DealerMoved(address)"(dealer?: null): DealerMovedEventFilter;
    DealerMoved(dealer?: null): DealerMovedEventFilter;

    "PaidChips(address,uint256)"(
      player?: null,
      amount?: null
    ): PaidChipsEventFilter;
    PaidChips(player?: null, amount?: null): PaidChipsEventFilter;

    "PlayerMoved(address)"(player?: null): PlayerMovedEventFilter;
    PlayerMoved(player?: null): PlayerMovedEventFilter;

    "StageAdvanced(uint8)"(stage?: null): StageAdvancedEventFilter;
    StageAdvanced(stage?: null): StageAdvancedEventFilter;
  };

  estimateGas: {
    MAX_BET(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_BET(overrides?: CallOverrides): Promise<BigNumber>;

    bet(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentStage(overrides?: CallOverrides): Promise<BigNumber>;

    getDealersFaceUpCardValue(overrides?: CallOverrides): Promise<BigNumber>;

    getGameInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerInfo(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    play(
      decision: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_BET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bet(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deal(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDealersFaceUpCardValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerInfo(
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payout(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    play(
      decision: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
